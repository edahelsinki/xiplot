{"version":3,"sources":["../src/index.ts","flask.ts","worker-loader.ts","webdash.ts"],"names":[],"mappings":"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","file":"webdash.f6d0893b.js","sourceRoot":"../src","sourcesContent":["export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n","/**\n * Based on Itay Dafna's https://github.com/ibdafna/webdash/releases/tag/0.0.3\n *\n * BSD 3-Clause License\n *\n * Copyright (c) 2021, Bloomberg LP\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { dedent } from \"ts-dedent\";\n\nimport { WorkerManager } from \"./worker-loader\";\nimport { log } from \"./webdash\";\n\n/**\n* A small, virtual web server wrapping the Flask server in Pyodide.\n*\n* It intercepts `fetch` requests and reroutes the ones targeted at\n* the dash app to Pyodide, while letting others pass through.\n*/\nexport class WebFlask {\n  private worker: WorkerManager;\n  private originalFetch: (\n    input: URL | RequestInfo,\n    init?: RequestInit | undefined\n  ) => Promise<Response>;\n\n  public constructor(workerManager) {\n    this.worker = workerManager;\n\n    this.originalFetch = window.fetch;\n    window.fetch = this.fetch.bind(this);\n  }\n\n  /**\n  * A custom `fetch` function which intercepts requests to\n  * the Flask server running the dash app, reroutes them to\n  * the wasm-side Flask server in Pyodide, and then converts\n  * the response to a JavaScript `Response`.\n  *\n  * Requests going to a different origin or route are passed\n  * through to the native `window.fetch` implementation.\n  *\n  * @param info `URL` or `string` or `Request` object\n  * @param init optionally `RequestInit`\n  *\n  * @returns JavaScript `Response` object\n  */\n  public async fetch(\n    info: URL | RequestInfo,\n    init?: RequestInit | undefined\n  ): Promise<Response> {\n    const url = new URL(new Request(info).url);\n\n    log(`[1. Request ${url.pathname} intercepted]`);\n\n    // Extract the route of the current window.location\n    const windowLocationRoute = window.location.href.replace(\n      /\\/(?:[^\\/]+?\\.[^\\/]*?|index)$/,\n      \"/\"\n    );\n\n    if (url.href.startsWith(windowLocationRoute)) {\n      const response = await this.webflaskFetch(info, init);\n\n      log(`[5. Request ${url.pathname} done]`);\n\n      return response;\n    } else {\n      log(`[2. Request ${url.pathname} passthrough]`);\n\n      return this.nativeFetch(info, init);\n    }\n  }\n\n  /**\n  * A custom `fetch` function which reroutes requests to\n  * the wasm-side Flask server in Pyodide, and then converts\n  * the response to a JavaScript `Response`.\n  *\n  * @param info `URL` or `string` or `Request` object\n  * @param init optionally `RequestInit`\n  *\n  * @returns JavaScript `Response` object\n  */\n  public async webflaskFetch(\n    info: URL | RequestInfo,\n    init?: RequestInit | undefined\n  ): Promise<Response> {\n    return await this.executeFlaskRequest(\n      this.generateRequestPythonCode(info, init)\n    );\n  }\n\n  /**\n  * A custom `fetch` function which passes the request\n  * through to the native `window.fetch` implementation.\n  *\n  * @param info `URL` or `string` or `Request` object\n  * @param init optionally `RequestInit`\n  *\n  * @returns JavaScript `Response` object\n  */\n  public async nativeFetch(\n    info: URL | RequestInfo,\n    init?: RequestInit | undefined\n  ): Promise<Response> {\n    return this.originalFetch.apply(window, [info, init]);\n  }\n\n  /**\n  * Executes the given stringified Python code in Pyodide\n  * against the Flask server backend and converts the\n  * response to a an equivalent `Response` object.\n  *\n  * @param request_python_code stringified Python code\n  *\n  * @returns JavaScript `Response` object\n  */\n  private async executeFlaskRequest(\n    request_python_code: string\n  ): Promise<Response> {\n    log(\"[2. Flask Request Generated]\");\n\n    const flaskResponse = await this.worker.executeWithAnyResponse(\n      request_python_code,\n      {}\n    );\n\n    log(\"[4. Flask Response Received]\");\n\n    const options = {};\n    if (flaskResponse[\"headers\"]) {\n      options[\"headers\"] = flaskResponse[\"headers\"];\n    }\n    if (flaskResponse[\"status\"]) {\n      options[\"status\"] = flaskResponse[\"status\"];\n    }\n\n    return new Response(flaskResponse[\"response\"], options);\n  }\n\n  /**\n  * Generates the stringified Python code to be run in Pyodide\n  * to perform a request on the Flask server backend.\n  *\n  * Note: assumes request payload is either `null` or `json`.\n  *\n  * @param info `URL` or `string` or `Request` object\n  * @param init optionally `RequestInit`\n  *\n  * @returs stringified Python code\n  */\n  private generateRequestPythonCode(\n    info: URL | RequestInfo,\n    init?: RequestInit | undefined\n  ): string {\n    let data;\n    if (init && init.body) {\n      data = `r\"\"\"${init.body}\"\"\"`;\n    } else {\n      data = \"None\";\n    }\n\n    let content_type;\n    if (init && init.body) {\n      content_type = `\"application/json\"`;\n    } else {\n      content_type = \"None\";\n    }\n\n    return dedent`\n      with app.server.app_context():\n        with app.server.test_client() as client:\n          response = client.open('${info}',\n            data=${data},\n            content_type=${content_type},\n            method=\"${(init && init.method) || \"GET\"}\",\n          )\n      response\n    `;\n  }\n}\n ","import { log } from \"./webdash\";\n/**\n * A small queue where we queue \"OnSuccess\" functions\n * for each request sent. For each request, a success\n * function gets queued. Upon each incoming message,\n * we dequeue and execute the \"OnSuccess function\".\n *\n * TODO: Implement a more efficient queuing system.\n */\nclass ResponseQueue {\n  private queue: Array<Function>;\n\n  public constructor() {\n    this.queue = [];\n  }\n\n  public enqueue(onSuccessFn: Function) {\n    return this.queue.push(onSuccessFn);\n  }\n\n  public dequeue() {\n    return this.queue.shift();\n  }\n}\n\ntype Payload = { [key: string]: any };\n\n/**\n * This class is used as an intermediary between\n * the WebWorker and the application client.\n * It currently supports two main message types:\n *\n *  1. HTTP Request/Response objects.\n *  2. binary file transfers.\n */\nexport class WorkerManager {\n  private queue: ResponseQueue;\n  private worker: Worker;\n\n  public constructor() {\n    this.queue = new ResponseQueue();\n    this.worker = new Worker(\"./worker.ts\");\n  }\n\n  /**\n   * Runs Python code on the WebWorker.\n   * @param script python script\n   * @param context additional payload\n   * @param onSuccess callback function if executed successfully\n   * @param onError callback function for if errored\n   */\n  private run(\n    script: string,\n    context: Payload,\n    onSuccess: Function,\n    onError: Function\n  ): void {\n    this.queue.enqueue(onSuccess);\n    this.worker.onerror = (e) => onError(e);\n    this.worker.onmessage = this.processMessage.bind(this);\n    this.worker.postMessage({\n      ...context,\n      python: script,\n    });\n  }\n\n  /**\n   * Processes messages received by the 'run' function.\n   * This includes console.log messages for the intitial\n   * bootstrap phase.\n   * @param e Message object\n   * @returns void or resolved promise\n   */\n  private processMessage(e): Function | void {\n    log(\"[4. Message received from worker]\");\n\n    // Update status tracker if this is a console.log message\n    if (e.data.consoleMessage) {\n      const statusBar = document.querySelector(\".status\");\n      if (statusBar) {\n        statusBar.innerHTML = e.data.consoleMessage;\n      }\n      else {\n        console.log(e.data.consoleMessage);\n      }\n      return;\n    }\n\n    if (e.data.consoleError) {\n      const statusBar = document.querySelector(\".status\");\n      if (statusBar) {\n        statusBar.innerHTML = e.data.consoleError;\n      }\n      else {\n        console.error(e.data.consoleError);\n      }\n      return;\n    }\n\n    // Otherwise this is a response for dash-renderer\n    // and we should act on it.\n    const success = this.queue.dequeue()!;\n    return success(e.data.results);\n  }\n\n  /**\n   * Runs a Python script on the WebWorker.\n   * @param script python script to run\n   * @param context optional additional arguments\n   * @returns BlobPart or string\n   */\n  public async executeWithAnyResponse(script: string, context: Payload): Promise<any> {\n    return await (new Promise(\n      (onSuccess: Function, onError: (e: ErrorEvent) => any) => {\n        this.run(script, context, onSuccess, onError);\n      }\n    ));\n  }\n\n  /**\n   * Runs a Python script on the WebWorker.\n   * @param script python script to run\n   * @param context optional additional arguments\n   * @returns BlobPart\n   */\n  public async executeWithBinaryResponse(script: string, context: Payload): Promise<BlobPart> {\n    const result: any = await this.executeWithAnyResponse(script, context);\n\n    if (result as BlobPart) {\n      return result as BlobPart;\n    }\n\n    throw TypeError(\"Expected binary WebFlask response but received String\");\n  }\n\n  /**\n   * Runs a Python script on the WebWorker.\n   * @param script python script to run\n   * @param context optional additional arguments\n   * @returns string\n   */\n  public async executeWithStringResponse(script: string, context: Payload): Promise<string> {\n    const result: any = await this.executeWithAnyResponse(script, context);\n\n    if (result as string) {\n      return result as string;\n    }\n\n    throw TypeError(\"Expected String WebFlask response but received binary\");\n  }\n}\n","/**\n * Based on Itay Dafna's https://github.com/ibdafna/webdash/releases/tag/0.0.3\n *\n * BSD 3-Clause License\n *\n * Copyright (c) 2021, Bloomberg LP\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { dedent } from \"ts-dedent\";\n\nimport { WebFlask } from \"./flask\";\nimport { WorkerManager } from \"./worker-loader\";\n\ndeclare global {\n  export interface Window {\n    webDash: WebDash;\n  }\n}\n\nconst dev = process.env.NODE_ENV === \"development\";\n\n/**\n* Log function that swallows messages in production\n* and forwards them to `console.log` in development.\n*\n* @param args arguments for `console.log`\n*/\nexport function log(...args) {\n  if (dev) {\n    console.log(...args);\n  }\n}\n\n/**\n* The entry point for WebDash.\n*\n* It initialises the virtual Flask server running\n* inside Pyodide, bootstraps the Dash app and its\n* renderer, and coordinates communication between\n* the Dash frontend and the Flask server backend.\n*/\nclass WebDash {\n  private workerManager: WorkerManager;\n  private webFlask: WebFlask;\n\n  /**\n  * Initialises and bootstraps WebDash.\n  */\n  public constructor() {\n    this.workerManager = new WorkerManager();\n    this.webFlask = new WebFlask(this.workerManager);\n\n    this.bootstrap();\n  }\n\n  private async bootstrap() {\n    await this.initialiseDashApp();\n\n    await this.injectDashHeaders(document.head);\n    await this.injectDashReactEntryPoint(document.body);\n\n    const footer = await this.injectDashAppConfig(document.body);\n\n    await this.injectDashScripts(footer);\n    await this.injectDashRenderer(footer);\n  }\n\n  private async initialiseDashApp() {\n    log(\"Initialising and bootstrapping the dash app\");\n\n    const bootstrap_python: string = await this.webFlask\n      .nativeFetch(\"bootstrap.py\")\n      .then((response) => response.text());\n    const url_base_pathname: string = window.location.pathname.replace(\n      /\\/(?:[^\\/]+?\\.[^\\/]*?|index)$/,\n      \"/\"\n    );\n\n    await this.workerManager.executeWithAnyResponse(\n      dedent`\n        ${bootstrap_python}\n\n        # Initialise and bootstrap the dash app\n        app = bootstrap_dash_app(\"${url_base_pathname}\")\n      `,\n      {}\n    );\n  }\n\n  private async injectDashHeaders(head: HTMLElement) {\n    log(\"Patching in dash's head tag\");\n\n    const meta_tags = await this.workerManager.executeWithStringResponse(\n      \"app._generate_meta_html()\",\n      {}\n    );\n\n    const title = await this.workerManager.executeWithStringResponse(\n      \"app.title\",\n      {}\n    );\n    const title_tag = `<title>${title}</title>`;\n\n    const favicon = await this.workerManager.executeWithStringResponse(\n      \"app.get_asset_url(app._favicon)\",\n      {}\n    );\n    const favicon_tag = `<link rel=\"icon\" type=\"image/x-icon\" href=\"${favicon}\">`;\n\n    const script_tags_timed =\n      await this.workerManager.executeWithStringResponse(\n        \"app._generate_css_dist_html()\",\n        {}\n      );\n    // Remove dash-generated ?m=<timestamp> fingerprints from href\n    const script_tags = script_tags_timed.replace(\n      /href=\"(?<href>[^\"?]+?)(?:\\?[^\"]*)?\"/g,\n      'href=\"$1\"'\n    );\n\n    head.innerHTML = `${meta_tags}\\n${title_tag}\\n${favicon_tag}\\n${script_tags}`;\n  }\n\n  private async injectDashReactEntryPoint(body: HTMLElement) {\n    log(\"Patching in dash's body tag with the react entry point\");\n\n    const react_entry_point =\n      await this.workerManager.executeWithStringResponse(\n        \"dash.dash._app_entry\",\n        {}\n      );\n\n    body.innerHTML = react_entry_point;\n  }\n\n  private async injectDashAppConfig(body: HTMLElement): Promise<HTMLElement> {\n    log(\"Injecting the footer tag with the initial config of the dash app\");\n\n    const app_config = await this.workerManager.executeWithStringResponse(\n      \"app._generate_config_html()\",\n      {}\n    );\n\n    const footer = document.createElement(\"footer\");\n    footer.innerHTML = app_config;\n\n    body.appendChild(footer);\n\n    return footer;\n  }\n\n  private async injectDashScripts(footer: HTMLElement) {\n    log(\"Injecting the dash script tags\");\n\n    const script_tags = await this.workerManager.executeWithStringResponse(\n      \"app._generate_scripts_html()\",\n      {}\n    );\n\n    for (const script of script_tags.split(\"</script>\")) {\n      // Remove dash-generated ?m=<timestamp> fingerprints from src\n      const src = script.match(/src=\"(?<src>[^\"?]+?)(?:\\?[^\"]*)?\"/)?.groups\n        ?.src;\n      const content = script.replace(\"<script>\", \"\");\n\n      // Skip empty whitespace after the last script tag\n      if (content.replace(/\\s/, \"\").length == 0) {\n        continue;\n      }\n\n      const loaded = new Promise((resolve, reject) => {\n        if (src) {\n          log(`Injecting the script tag with src ${src}`);\n        }\n        {\n          log(`Injecting an inline script tag`);\n        }\n\n        const script_tag = document.createElement(\"script\");\n        script_tag.type = \"text/javascript\";\n\n        if (src) {\n          script_tag.src = src;\n        } else {\n          script_tag.text = content;\n        }\n\n        script_tag.onerror = (err) => reject(err);\n\n        let ready = false;\n        script_tag.onload = function () {\n          if (!ready) {\n            ready = true;\n            resolve(null);\n          }\n        };\n\n        footer.appendChild(script_tag);\n\n        // Only script tags with a src must be loaded\n        if (!src) {\n          resolve(null);\n        }\n      });\n\n      await loaded;\n    }\n\n    log(\"Successfully injected all dash script tags\");\n  }\n\n  private async injectDashRenderer(footer: HTMLElement) {\n    log(\"Injecting the ignition for the dash renderer\");\n\n    const render_script = await this.workerManager.executeWithStringResponse(\n      \"app.renderer\",\n      {}\n    );\n\n    const renderer_script_tag = document.createElement(\"script\");\n    renderer_script_tag.id = \"_dash-renderer\";\n    renderer_script_tag.type = \"application/javascript\";\n    renderer_script_tag.text = render_script;\n\n    footer.appendChild(renderer_script_tag);\n  }\n}\n\nwindow.webDash = new WebDash();\n "]}