{"version":3,"sources":["flask.ts","worker-loader.ts","webdash.ts"],"names":[],"mappings":"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","file":"webdash.77005cd4.js","sourceRoot":"../src","sourcesContent":["import { WorkerManager } from \"./worker-loader\";\nimport { log } from \"./webdash\";\n\n/**\n * A small, virtual web server emulating Flask (Python).\n */\nexport class WebFlask {\n  constructor() {\n    this.worker = window.workerManager;\n\n    this.originalFetch = window.fetch;\n    window.fetch = this.fetch.bind(this);\n  }\n\n  /**\n   * Sends a POST request to the Python Flask backend.\n   * @param req Request Object\n   * @param init request payload\n   */\n  postRequest(req, init) {\n    log(\"[POST Request]\", req);\n\n    let data;\n    if (init.body) {\n      data = `r\"\"\"${init.body}\"\"\"`\n    } else {\n      data = \"None\"\n    }\n\n    let content_type;\n    if (init.body) {\n      content_type = `\"application/json\"`\n    } else {\n      content_type = \"None\"\n    }\n\n    return `\n    with app.server.app_context():\n      with app.server.test_client() as client:\n        x = client.open('${req}',\n          data=${data},\n          content_type=${content_type},\n          method=\"${init.method || 'GET'}\",\n        )\n    x`;\n  }\n\n  /**\n   * Retrieves a Flask response object and converts it\n   * to a compatible Response object.\n   * @param codeWillRun stringified python code\n   */\n  async generateResponse(codeWillRun) {\n    log(\"[2. Flask Request Generated]\");\n    const flaskRespone = await this.worker.asyncRun(codeWillRun, {});\n    log(\"[5. Flask Response Received]\");\n    const options = {};\n    if (flaskRespone[\"headers\"]) {\n      options[\"headers\"] = flaskRespone[\"headers\"];\n    }\n    if (flaskRespone[\"status\"]) {\n      options[\"status\"] = flaskRespone[\"status\"];\n    }\n    return new Response(flaskRespone[\"response\"], options);\n  }\n\n  /**\n   * A custom fetch function which intercepts Flask requests\n   * and routes to the Python backend.\n   * @param req Request object\n   * @param init request payload\n   */\n  async fetch(\n    req: Request,\n    init?: RequestInit | null | undefined\n  ): Promise<Response> {\n    // TODO: handle raw requests in addition to strings\n    log(\"[1. Request Intercepted]\", req);\n    const url = new URL(new Request(req).url);\n\n    const originLocation = window.location.href.replace(/\\/(?:[^\\/]+?\\.[^\\/]*?|index)$/, '/')\n\n    if (url.href.startsWith(originLocation)) {\n      const resp = await this.generateResponse(this.postRequest(req, init));\n      log(`[6. ${url.pathname} done.]`);\n      return resp;\n    } else {\n      log(\"[Passthrough Request]\");\n      return this.originalFetch.apply(window, [req, init]);\n    }\n  }\n\n  worker: WorkerManager;\n  originalFetch: (request: any, response: any) => Promise<Response>;\n}\n","import { log } from \"./webdash\";\n/**\n * A small queue where we queue \"OnSuccess\" functions\n * for each request sent. For each request, a success\n * function gets queued. Upon each incoming message,\n * we dequeue and execute the \"OnSuccess function\".\n *\n * TODO: Implement a more efficient queuing system.\n */\nclass ResponseQueue {\n  constructor() {\n    this.queue = [];\n  }\n  enqueue(onSuccessFn: Function) {\n    return this.queue.push(onSuccessFn);\n  }\n  dequeue() {\n    return this.queue.shift();\n  }\n\n  queue: Array<Function>;\n}\n\n/**\n * This class is used as an intermediary between\n * the WebWorker and the application client.\n * It currently supports two main message types:\n *\n *  1. HTTP Request/Response objects.\n *  2. binary file transfers.\n */\nexport class WorkerManager {\n  constructor() {\n    this.queue = new ResponseQueue();\n    this.worker = new Worker(\"./worker.js\");\n  }\n\n  /**\n   * Runs Python code on the WebWorker.\n   * @param script python script\n   * @param context additional payload\n   * @param onSuccess callback function if executed successfully\n   * @param onError callback function for if errored\n   */\n  run(\n    script: string,\n    context: Payload,\n    onSuccess: Function,\n    onError: Function\n  ): void {\n    this.queue.enqueue(onSuccess);\n    this.worker.onerror = (e) => onError(e);\n    this.worker.onmessage = this.processMessage.bind(this);\n    this.worker.postMessage({\n      ...context,\n      python: script,\n    });\n  }\n\n  /**\n   * Processes messages received by the 'run' function.\n   * This includes console.log messages for the intitial\n   * bootstrap phase.\n   * @param e Message object\n   * @returns void or resolved promise\n   */\n  processMessage(e): Function | void {\n    log(\"[4. Message received from worker]\");\n\n    // Update status tracker if this is a console.log message\n    if (e.data.consoleMessage) {\n      const statusBar = document.querySelector(\".status\");\n      if (statusBar) {\n        statusBar.innerHTML = e.data.consoleMessage;\n      }\n      return;\n    }\n\n    // Otherwise this is a response for dash-renderer\n    // and we should act on it.\n    const success = this.queue.dequeue();\n    return success(e.data.results);\n  }\n\n  /**\n   * Runs a Python script on the WebWorker.\n   * @param script python script to run\n   * @param context optional additional arguments\n   * @returns BlobPart or string\n   */\n  asyncRun(script: string, context: Payload): Promise<BlobPart | string> {\n    return new Promise(\n      (onSuccess: Function, onError: (e: ErrorEvent) => any) => {\n        this.run(script, context, onSuccess, onError);\n      }\n    );\n  }\n\n  /**\n   * Reads a directory from the virtual file system.\n   * @param dir directory name\n   * @returns a list of files present in the directory\n   */\n  async fsReadDir(dir: string): Promise<string[]> {\n    return new Promise(\n      (onSuccess: Function, onError: (e: ErrorEvent) => any) => {\n        this.worker.onerror = onError;\n        this.worker.onmessage = (e: MessageEvent) => onSuccess(e.data.results);\n        this.worker.postMessage({\n          fsCommands: {\n            msgType: \"readdir\",\n            param: dir,\n          },\n        });\n      }\n    );\n  }\n\n  /**\n   * Reads a file from the virtual file system.\n   * @param file filename\n   * @returns a binary array with the file content\n   */\n  async fsReadFile(file: string): Promise<BlobPart | string> {\n    return new Promise(\n      (onSuccess: Function, onError: (e: ErrorEvent) => any) => {\n        this.worker.onerror = onError;\n        this.worker.onmessage = (e: MessageEvent) => onSuccess(e.data.results);\n        this.worker.postMessage({\n          fsCommands: {\n            msgType: \"readFile\",\n            param: file,\n          },\n        });\n      }\n    );\n  }\n\n  queue: ResponseQueue;\n  worker: Worker;\n}\n\ntype Payload = { [key: string]: any };\n","import { WebFlask } from \"./flask\";\nimport { WorkerManager } from \"./worker-loader\";\n\ndeclare global {\n  export interface Window {\n    fetch: Function;\n    workerManager: WorkerManager;\n    dashApp: string;\n    webDash: WebDash;\n    log: Function;\n  }\n}\n\n/**\n * Enables debug logs for development environments.\n */\nexport let dev = false;\nif (process.env.NODE_ENV === \"development\") {\n  dev = true;\n}\n\nexport function log(...args) {\n  if (dev) {\n    console.log(...args);\n  }\n}\n\n/**\n * The entry point for WebDash. It is responsible for\n * instantiating and coordinating the different\n * components which make up the communication\n * between the Dash frontend and the virtual\n * Flask backend running in WASM.\n */\nclass WebDash {\n  constructor() {\n    this.workerManager = new WorkerManager();\n    window.workerManager = this.workerManager;\n    this.webFlask = new WebFlask();\n\n    this.main();\n  }\n\n  async main() {\n    log(\"Initialising dash app\");\n    await this.initialiseDashApp();\n\n    log(\"Starting book sequence\");\n    await this.startBootSequence();\n    log(\"Finished boot sequence\");\n  }\n\n  async initialiseDashApp() {\n    return this.workerManager.asyncRun(\n      `\nimport dash\nimport re\n\ncache_regex = re.compile(r\"^v[\\\\w-]+$\")\nversion_clean = re.compile(r\"[^\\\\w-]\")\n\ndef new_build_fingerprint(path, version, _hash_value):\n  path_parts = path.split(\"/\")\n  filename, extension = path_parts[-1].split(\".\", 1)\n  file_path = \"/\".join(path_parts[:-1] + [filename])\n  v_str = re.sub(version_clean, \"_\", str(version))\n\n  return f\"{file_path}.v{v_str}.{extension}\"\n\n\ndef new_check_fingerprint(path):\n  path_parts = path.split(\"/\")\n  name_parts = path_parts[-1].split(\".\")\n\n  # Check if the resource has a fingerprint\n  if len(name_parts) > 2 and cache_regex.match(name_parts[1]):\n    original_name = \".\".join([name_parts[0]] + name_parts[2:])\n    return \"/\".join(path_parts[:-1] + [original_name]), True\n\n  return path, False\n\ndash.fingerprint.build_fingerprint = new_build_fingerprint\ndash.dash.build_fingerprint = new_build_fingerprint\n\ndash.fingerprint.check_fingerprint = new_check_fingerprint\ndash.dash.check_fingerprint = new_check_fingerprint\n\nURL_BASE_PATHNAME = \"${window.location.pathname.replace(/\\/(?:[^\\/]+?\\.[^\\/]*?|index)$/, '/')}\";\n\n${window.dashApp}\n      `,\n      {}\n    );\n  }\n\n  async startBootSequence() {\n    // Inject the meta, title, and css tags\n    document.head.innerHTML = `\n${await this.workerManager.asyncRun(\"app._generate_meta_html()\", {})}\n<title>${await this.workerManager.asyncRun(\"app.title\", {})}</title>\n<link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n${await this.workerManager.asyncRun(\"app._generate_css_dist_html()\", {})}\n    `;\n\n    // Inject the react entry point\n    document.body.innerHTML = `${await self.workerManager.asyncRun(\"dash.dash._app_entry\", {})}`;\n\n    // Inject the initial app config\n    const footer = document.createElement(\"footer\");\n    footer.innerHTML = await self.workerManager.asyncRun(\"app._generate_config_html()\", {});\n    document.body.appendChild(footer);\n\n    const scriptChunk = await this.workerManager.asyncRun(\"app._generate_scripts_html()\", {});\n\n    for (const script of scriptChunk.split(\"</script>\")) {\n      let src = script.match(/src=\"(?<src>[^\"]+)\"/);\n      if (src) {\n        src = src.groups.src;\n      }\n      let content = script.replace(\"<script>\", \"\");\n\n      if (content.replace(/\\s/, \"\").length == 0) {\n        continue;\n      }\n\n      const promise = new Promise((resolve, reject) => {\n        log(`Parsing script tag with src ${src}`);\n\n        const scriptTag = document.createElement(\"script\");\n\n        scriptTag.type = 'text/javascript';\n\n        if (src) {\n          scriptTag.src = src;\n        } else {\n          scriptTag.text = content;\n        }\n\n        scriptTag.onerror = (err) => reject(err);\n\n        let r = false;\n        scriptTag.onload = scriptTag.onreadystatechange = function() {\n          if (!r && (!this.readyState || this.readyState == 'complete')) {\n            log(`Successfully loaded the script tag with src ${src}`)\n            r = true;\n            resolve(null);\n          }\n        };\n\n        footer.appendChild(scriptTag);\n\n        if (!src) {\n          resolve(null);\n        }\n      });\n\n      await promise;\n    }\n\n    log(\"Successfully loaded all script tags\");\n\n    // Inject the app render kickoff\n    const rendererScriptTag = document.createElement(\"script\");\n    rendererScriptTag.id = \"_dash-renderer\";\n    rendererScriptTag.type = \"application/javascript\";\n    rendererScriptTag.text = await self.workerManager.asyncRun(\"app.renderer\", {});\n    footer.appendChild(rendererScriptTag);\n  }\n\n  workerManager: WorkerManager;\n  webFlask: WebFlask;\n  dev: boolean;\n}\n\nwindow.webDash = new WebDash();\n"]}