{"version":3,"sources":["flask.ts","worker-loader.ts","webdash.ts"],"names":[],"mappings":"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","file":"webdash.8f607087.js","sourceRoot":"../src","sourcesContent":["/**\n * Based on Itay Dafna's https://github.com/ibdafna/webdash/releases/tag/0.0.3\n * \n * BSD 3-Clause License\n * \n * Copyright (c) 2021, Bloomberg LP\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * \n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { WorkerManager } from \"./worker-loader\";\nimport { log } from \"./webdash\";\n\n/**\n * A small, virtual web server wrapping the Flask server in Pyodide.\n *\n * It intercepts `fetch` requests and reroutes the ones targeted at\n * the dash app to Pyodide, while letting others pass through.\n */\nexport class WebFlask {\n  worker: WorkerManager;\n  originalFetch: (request: any, response: any) => Promise<Response>;\n\n  constructor(workerManager) {\n    this.worker = workerManager;\n\n    this.originalFetch = window.fetch;\n    window.fetch = this.fetch.bind(this);\n  }\n\n  /**\n   * Generates the stringified Python code to be run in Pyodide\n   * to perform a request on the Flask server backend.\n   *\n   * Note: assumes request payload is either `null` or `json`.\n   *\n   * @param req Request Object\n   * @param init request payload\n   *\n   * @returs stringified Python code\n   */\n  generateRequestPythonCode(req, init) {\n    let data;\n    if (init && init.body) {\n      data = `r\"\"\"${init.body}\"\"\"`;\n    } else {\n      data = \"None\";\n    }\n\n    let content_type;\n    if (init && init.body) {\n      content_type = `\"application/json\"`;\n    } else {\n      content_type = \"None\";\n    }\n\n    return `\n    with app.server.app_context():\n      with app.server.test_client() as client:\n        response = client.open('${req}',\n          data=${data},\n          content_type=${content_type},\n          method=\"${(init && init.method) || \"GET\"}\",\n        )\n    response`;\n  }\n\n  /**\n   * Executes the given stringified Python code in Pyodide\n   * against the Flask server backend and converts the\n   * response to a an equivalent `Response` object.\n   *\n   * @param requestPythonCode stringified Python code\n   *\n   * @returns JavaScript `Response` object\n   */\n  async executeFlaskRequest(requestPythonCode): Promise<Response> {\n    log(\"[2. Flask Request Generated]\");\n\n    const flaskResponse = await this.worker.executeWithAnyResponse(requestPythonCode, {});\n\n    log(\"[4. Flask Response Received]\");\n\n    const options = {};\n    if (flaskResponse[\"headers\"]) {\n      options[\"headers\"] = flaskResponse[\"headers\"];\n    }\n    if (flaskResponse[\"status\"]) {\n      options[\"status\"] = flaskResponse[\"status\"];\n    }\n\n    return new Response(flaskResponse[\"response\"], options);\n  }\n\n  /**\n   * A custom `fetch` function which intercepts requests to\n   * the Flask server running the dash app, reroutes them to\n   * the wasm-side Flask server in Pyodide, and then converts\n   * the response to a JavaScript `Response`.\n   *\n   * Requests going to a different origin or route are passed\n   * through to the native `window.fetch` implementation.\n   *\n   * @param req JavaScript `Request` object\n   * @param init JavaScript `RequestInit` payload\n   *\n   * @returns JavaScript `Response` object\n   */\n  async fetch(\n    req: Request,\n    init?: RequestInit | null | undefined\n  ): Promise<Response> {\n    const url = new URL(new Request(req).url);\n\n    log(`[1. Request ${url.pathname} intercepted]`);\n\n    // Extract the route of the current window.location\n    const windowLocationRoute = window.location.href.replace(\n      /\\/(?:[^\\/]+?\\.[^\\/]*?|index)$/,\n      \"/\"\n    );\n\n    if (url.href.startsWith(windowLocationRoute)) {\n      const response = await this.executeFlaskRequest(\n        this.generateRequestPythonCode(req, init)\n      );\n\n      log(`[5. Request ${url.pathname} done]`);\n\n      return response;\n    } else {\n      log(`[2. Request ${url.pathname} passthrough]`);\n\n      return this.originalFetch.apply(window, [req, init]);\n    }\n  }\n}\n","import { log } from \"./webdash\";\n/**\n * A small queue where we queue \"OnSuccess\" functions\n * for each request sent. For each request, a success\n * function gets queued. Upon each incoming message,\n * we dequeue and execute the \"OnSuccess function\".\n *\n * TODO: Implement a more efficient queuing system.\n */\nclass ResponseQueue {\n  constructor() {\n    this.queue = [];\n  }\n  enqueue(onSuccessFn: Function) {\n    return this.queue.push(onSuccessFn);\n  }\n  dequeue() {\n    return this.queue.shift();\n  }\n\n  queue: Array<Function>;\n}\n\ntype Payload = { [key: string]: any };\n\n/**\n * This class is used as an intermediary between\n * the WebWorker and the application client.\n * It currently supports two main message types:\n *\n *  1. HTTP Request/Response objects.\n *  2. binary file transfers.\n */\nexport class WorkerManager {\n  queue: ResponseQueue;\n  worker: Worker;\n\n  constructor() {\n    this.queue = new ResponseQueue();\n    this.worker = new Worker(\"./worker.js\");\n  }\n\n  /**\n   * Runs Python code on the WebWorker.\n   * @param script python script\n   * @param context additional payload\n   * @param onSuccess callback function if executed successfully\n   * @param onError callback function for if errored\n   */\n  run(\n    script: string,\n    context: Payload,\n    onSuccess: Function,\n    onError: Function\n  ): void {\n    this.queue.enqueue(onSuccess);\n    this.worker.onerror = (e) => onError(e);\n    this.worker.onmessage = this.processMessage.bind(this);\n    this.worker.postMessage({\n      ...context,\n      python: script,\n    });\n  }\n\n  /**\n   * Processes messages received by the 'run' function.\n   * This includes console.log messages for the intitial\n   * bootstrap phase.\n   * @param e Message object\n   * @returns void or resolved promise\n   */\n  processMessage(e): Function | void {\n    log(\"[4. Message received from worker]\");\n\n    // Update status tracker if this is a console.log message\n    if (e.data.consoleMessage) {\n      const statusBar = document.querySelector(\".status\");\n      if (statusBar) {\n        statusBar.innerHTML = e.data.consoleMessage;\n      }\n      return;\n    }\n\n    // Otherwise this is a response for dash-renderer\n    // and we should act on it.\n    const success = this.queue.dequeue()!;\n    return success(e.data.results);\n  }\n\n  /**\n   * Runs a Python script on the WebWorker.\n   * @param script python script to run\n   * @param context optional additional arguments\n   * @returns BlobPart or string\n   */\n  async executeWithAnyResponse(script: string, context: Payload): Promise<any> {\n    return await (new Promise(\n      (onSuccess: Function, onError: (e: ErrorEvent) => any) => {\n        this.run(script, context, onSuccess, onError);\n      }\n    ));\n  }\n\n  /**\n   * Runs a Python script on the WebWorker.\n   * @param script python script to run\n   * @param context optional additional arguments\n   * @returns BlobPart\n   */\n  async executeWithBinaryResponse(script: string, context: Payload): Promise<BlobPart> {\n    const result: any = await this.executeWithAnyResponse(script, context);\n\n    if (result as BlobPart) {\n      return result as BlobPart;\n    }\n\n    throw TypeError(\"Expected binary WebFlask response but received String\");\n  }\n\n  /**\n   * Runs a Python script on the WebWorker.\n   * @param script python script to run\n   * @param context optional additional arguments\n   * @returns string\n   */\n  async executeWithStringResponse(script: string, context: Payload): Promise<string> {\n    const result: any = await this.executeWithAnyResponse(script, context);\n\n    if (result as string) {\n      return result as string;\n    }\n\n    throw TypeError(\"Expected String WebFlask response but received binary\");\n  }\n}\n","import { WebFlask } from \"./flask\";\nimport { WorkerManager } from \"./worker-loader\";\n\ndeclare global {\n  export interface Window {\n    webDash: WebDash;\n  }\n}\n\n/**\n * Enables debug logs for development environments.\n */\nconst dev = process.env.NODE_ENV === \"development\";\n\nexport function log(...args) {\n  if (dev) {\n    console.log(...args);\n  }\n}\n\n/**\n * The entry point for WebDash. It is responsible for\n * instantiating and coordinating the different\n * components which make up the communication\n * between the Dash frontend and the virtual\n * Flask backend running in WASM.\n */\nclass WebDash {\n  workerManager: WorkerManager;\n  webFlask: WebFlask;\n\n  constructor() {\n    this.workerManager = new WorkerManager();\n    this.webFlask = new WebFlask(this.workerManager);\n\n    this.run();\n  }\n\n  async run() {\n    await this.initialiseDashApp();\n\n    await this.injectDashHeaders(document.head);\n    await this.injectDashReactEntryPoint(document.body);\n\n    const footer = await this.injectDashAppConfig(document.body);\n\n    await this.injectDashScripts(footer);\n    await this.injectDashRenderer(footer);\n  }\n\n  async initialiseDashApp() {\n    log(\"Initialising and bootstrapping the dash app\");\n\n    const bootstrap_python: string = await this.webFlask.originalFetch\n      .apply(window, [\"bootstrap.py\"])\n      .then((response) => response.text());\n    const url_base_pathname: string = window.location.pathname.replace(\n      /\\/(?:[^\\/]+?\\.[^\\/]*?|index)$/,\n      \"/\"\n    );\n\n    await this.workerManager.executeWithAnyResponse(\n      `\n${bootstrap_python}\n\n# Initialise and bootstrap the dash app\napp = bootstrap_dash_app(\"${url_base_pathname}\")\n      `,\n      {}\n    );\n  }\n\n  async injectDashHeaders(head: HTMLElement) {\n    log(\"Patching in dash's head tag\");\n\n    const meta_tags = await this.workerManager.executeWithStringResponse(\n      \"app._generate_meta_html()\",\n      {}\n    );\n\n    const title = await this.workerManager.executeWithStringResponse(\"app.title\", {});\n    const title_tag = `<title>${title}</title>`;\n\n    const favicon = await this.workerManager.executeWithStringResponse(\n      \"app.get_asset_url(app._favicon)\",\n      {}\n    );\n    const favicon_tag = `<link rel=\"icon\" type=\"image/x-icon\" href=\"${favicon}\">`;\n\n    const script_tags_timed = await this.workerManager.executeWithStringResponse(\n      \"app._generate_css_dist_html()\",\n      {}\n    );\n    // Remove dash-generated ?m=<timestamp> fingerprints from href\n    const script_tags = script_tags_timed.replace(\n      /href=\"(?<href>[^\"?]+?)(?:\\?[^\"]*)?\"/g,\n      'href=\"$1\"'\n    );\n\n    head.innerHTML = `${meta_tags}\\n${title_tag}\\n${favicon_tag}\\n${script_tags}`;\n  }\n\n  async injectDashReactEntryPoint(body: HTMLElement) {\n    log(\"Patching in dash's body tag with the react entry point\");\n\n    const react_entry_point = await this.workerManager.executeWithStringResponse(\n      \"dash.dash._app_entry\",\n      {}\n    );\n\n    body.innerHTML = react_entry_point;\n  }\n\n  async injectDashAppConfig(body: HTMLElement): Promise<HTMLElement> {\n    log(\"Injecting the footer tag with the initial config of the dash app\");\n\n    const app_config = await this.workerManager.executeWithStringResponse(\n      \"app._generate_config_html()\",\n      {}\n    );\n\n    const footer = document.createElement(\"footer\");\n    footer.innerHTML = app_config;\n\n    body.appendChild(footer);\n\n    return footer;\n  }\n\n  async injectDashScripts(footer: HTMLElement) {\n    log(\"Injecting the dash script tags\");\n\n    const script_tags = await this.workerManager.executeWithStringResponse(\n      \"app._generate_scripts_html()\",\n      {}\n    );\n\n    for (const script of script_tags.split(\"</script>\")) {\n      // Remove dash-generated ?m=<timestamp> fingerprints from src\n      const src = script.match(/src=\"(?<src>[^\"?]+?)(?:\\?[^\"]*)?\"/)?.groups\n        ?.src;\n      const content = script.replace(\"<script>\", \"\");\n\n      // Skip empty whitespace after the last script tag\n      if (content.replace(/\\s/, \"\").length == 0) {\n        continue;\n      }\n\n      const loaded = new Promise((resolve, reject) => {\n        if (src) {\n          log(`Injecting the script tag with src ${src}`);\n        }\n        {\n          log(`Injecting an inline script tag`);\n        }\n\n        const script_tag = document.createElement(\"script\");\n        script_tag.type = \"text/javascript\";\n\n        if (src) {\n          script_tag.src = src;\n        } else {\n          script_tag.text = content;\n        }\n\n        script_tag.onerror = (err) => reject(err);\n\n        let ready = false;\n        script_tag.onload = function () {\n          if (!ready) {\n            ready = true;\n            resolve(null);\n          }\n        };\n\n        footer.appendChild(script_tag);\n\n        // Only script tags with a src must be loaded\n        if (!src) {\n          resolve(null);\n        }\n      });\n\n      await loaded;\n    }\n\n    log(\"Successfully injected all dash script tags\");\n  }\n\n  async injectDashRenderer(footer: HTMLElement) {\n    log(\"Injecting the ignition for the dash renderer\");\n\n    const render_script = await this.workerManager.executeWithStringResponse(\"app.renderer\", {});\n\n    const renderer_script_tag = document.createElement(\"script\");\n    renderer_script_tag.id = \"_dash-renderer\";\n    renderer_script_tag.type = \"application/javascript\";\n    renderer_script_tag.text = render_script;\n\n    footer.appendChild(renderer_script_tag);\n  }\n}\n\nwindow.webDash = new WebDash();\n"]}