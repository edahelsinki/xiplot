{"version":3,"sources":["worker.ts"],"names":[],"mappings":"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","file":"worker.f14a0468.js","sourceRoot":"../src","sourcesContent":["/**\n * Based on Itay Dafna's https://github.com/ibdafna/webdash/releases/tag/0.0.3\n *\n * BSD 3-Clause License\n *\n * Copyright (c) 2021, Bloomberg LP\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimportScripts(\"pyodide.js\");\n\n/**\n * Handler receiving message events from the WorkerManager.\n *\n * @param event the message\n */\nonmessage = async (event: MessageEvent) => {\n  const { uuid, python, ...context } = event.data;\n\n  try {\n    const pyodide = await maybe_pyodide;\n\n    const python_code: string = python;\n\n    // The worker copies the context in its own \"memory\" (an object mapping name to values)\n    for (const key of Object.keys(context)) {\n      self[key] = context[key];\n    }\n\n    // Load imported packages into the Pyodide interpreter\n    await pyodide.loadPackagesFromImports(\n      python_code,\n      postConsoleMessage,\n      postConsoleError\n    );\n\n    let result;\n\n    while (true) {\n      try {\n        // Execute the Python code\n        result = await pyodide.runPython(python_code);\n        break;\n      } catch (error) {\n        // Check if an import error occurred, if so get the package name\n        const package: string = await pyodide.runPython(\n          \"import sys; None if not isinstance(sys.last_value, ImportError) else sys.last_value.name\"\n        );\n\n        // Re-throw non-import errors\n        if (!package) {\n          throw error;\n        }\n\n        await pyodide.loadPackage(\n          package,\n          postConsoleMessage,\n          postConsoleError\n        );\n      }\n    }\n\n    // Check if the result is a PyProxy, if so convert it into a response object\n    if (pyodide.isPyProxy(result)) {\n      result = responseObjectFromPython(result);\n    }\n    \n    postResponseMessage(uuid, result);\n  } catch (error) {\n    postErrorMessage(uuid, error.message);\n  }\n};\n\n/**\n * The global Pyodide interpreter interface.\n */\nconst maybe_pyodide: Promise<PyodideInterface> = loadPyodide({\n  homedir: \"/\",\n  indexURL: \"\",\n  fullStdLib: false,\n  stdout: postConsoleMessage,\n  stderr: postConsoleError,\n});\n\n/**\n * Transforms a `PyProxy` response from Flask into an object\n * containing the response headers, body, and status code.\n *\n * @param python_response the `PyProxy` response\n *\n * @returns the response object\n */\nfunction responseObjectFromPython(python_response: PyProxy): {\n  response: string | Uint8Array | null;\n  status: number;\n  headers: { [key: string]: string };\n} {\n  let as_text;\n  const js_response = python_response.get_data((as_text = false)).toJs();\n\n  const decoder = new TextDecoder(\"utf-8\", { fatal: true });\n\n  // Attempt to decode the message as a string, otherwise leave it as is\n  let response: string | Uint8Array | null = null;\n  if (js_response) {\n    try {\n      response = decoder.decode(js_response);\n    } catch (_) {\n      response = js_response;\n    }\n  }\n  // Empty responses, e.g. for 204, must be null\n  response = response || null;\n\n  const status: number = python_response.status_code;\n\n  const header_keys: PyProxy & Iterable<string> =\n    python_response.headers.keys();\n  const headers = Array.from(header_keys).reduce(\n    (acc: object, val: string) => (\n      (acc[val] = python_response.headers.get(val)), acc\n    ),\n    {}\n  );\n\n  // Clean up the PyProxy objects to avoid a memory leak\n  header_keys.destroy();\n  python_response.destroy();\n\n  return {\n    response,\n    status,\n    headers,\n  };\n}\n\n/**\n * Post a response message to the WorkerManager.\n *\n * @param results the response\n */\nfunction postResponseMessage(uuid: string, results: any) {\n  self.postMessage({\n    uuid,\n    results,\n  });\n}\n\n/**\n * Post an error message to the WorkerManager.\n *\n * @param error the error message\n */\nfunction postErrorMessage(uuid: string, error: any) {\n  self.postMessage({\n    uuid,\n    error,\n  });\n}\n\n/**\n * Post a message to `console.log`\n *\n * @param consoleMessage the string message\n */\nfunction postConsoleMessage(consoleMessage: string) {\n  self.postMessage({\n    consoleMessage,\n  });\n}\n\n/**\n * Post a message to `console.error`\n *\n * @param consoleError the string error message\n */\nfunction postConsoleError(consoleError: string) {\n  self.postMessage({\n    consoleError,\n  });\n}\n\n/*\n * Reduced minimal type declarations for Pyodide.\n *\n * Extracted from pyodide.d.ts in\n * https://github.com/pyodide/pyodide/releases/tag/0.21.0a3\n */\n\ndeclare function loadPyodide(options?: {\n  indexURL?: string;\n  homedir?: string;\n  fullStdLib?: boolean;\n  stdout?: (msg: string) => void;\n  stderr?: (msg: string) => void;\n}): Promise<PyodideInterface>;\n\ndeclare type PyodideInterface = {\n  loadPackagesFromImports: (\n    code: string,\n    stdout?: (msg: string) => void,\n    stderr?: (err: string) => void\n  ) => Promise<void>;\n  loadPackage: (\n    name: string,\n    stdout?: (msg: string) => void,\n    stderr?: (err: string) => void\n  ) => Promise<void>;\n  isPyProxy: (jsobj: any) => jsobj is PyProxy;\n  runPython: (code: string) => any;\n  runPythonAsync: (code: string) => Promise<any>;\n};\n\ndeclare type PyProxy = PyProxyClass & {\n  [x: string]: any;\n};\n\ndeclare class PyProxyClass {\n  destroy(): void;\n  toJs(): any;\n}\n"]}