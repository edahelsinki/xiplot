{"version":3,"sources":["worker.js"],"names":["initialisePyodide","loadPyodide","homedir","indexURL","self","pyodide","importScripts","pyodideReadyPromise","generateResponseObject","pythonResponse","responseBody","responseBytes","get_data","as_text","toJs","decoder","TextDecoder","fatal","decode","_","headerKeys","headers","keys","returnObject","response","status","status_code","Array","from","reduce","acc","val","get","destroy","handleFsCommand","fsCommand","msgType","param","console","debug","result","_module","FS","postMessageTransferable","buffer","postMessageRegular","error","handlePythonCode","python","loadPackagesFromImports","postConsoleMessage","runPython","isPyProxy","postMessageError","object","postMessage","results","transferable","message","consoleMessage","onmessage","event","data","context","Object","key"],"mappings":"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","file":"worker.0ac68e07.js","sourceRoot":"../src","sourcesContent":["importScripts(\"pyodide.js\");\n\n\nasync function initialisePyodide() {\n  self.pyodide = await loadPyodide({\n    homedir: \"/\",\n    indexURL: \"\",\n  });\n}\n\nlet pyodideReadyPromise = initialisePyodide();\n\nfunction generateResponseObject(pythonResponse) {\n  const responseBytes = pythonResponse.get_data((as_text = false)).toJs();\n  const decoder = new TextDecoder(\"utf-8\", {fatal: true});\n  let responseBody\n  if (responseBytes) {\n    try {\n      responseBody = decoder.decode(responseBytes);\n    } catch (_) {\n      responseBody = responseBytes;\n    }\n  }\n  const headerKeys = pythonResponse.headers.keys();\n  const responseStatus = pythonResponse.status_code;\n  const returnObject = {\n    response: responseBody || null,\n    status: responseStatus,\n    headers: Array.from(headerKeys).reduce(\n      (acc, val) => ((acc[val] = pythonResponse.headers.get(val)), acc),\n      {}\n    ),\n  };\n\n  // Clean up Proxy Object so we don't leak memory\n  headerKeys.destroy();\n  pythonResponse.destroy();\n\n  return returnObject;\n}\n\nfunction handleFsCommand(fsCommand) {\n  const { msgType, param } = fsCommand;\n\n  console.debug(`wasm: handleFsCommand(${msgType}, ...)`);\n\n  try {\n    const result = pyodide._module.FS[msgType](param);\n\n    msgType === \"readFile\"\n      ? postMessageTransferable(result, [result.buffer])\n      : postMessageRegular(result);\n  } catch (error) {\n    postMessageRegular(error);\n  }\n}\n\nasync function handlePythonCode(python) {\n  console.debug(`wasm: handlePythonCode(...)`);\n\n  // Load any imports\n  await self.pyodide.loadPackagesFromImports(python, postConsoleMessage, postConsoleMessage);\n\n  let result = await self.pyodide.runPython(python);\n\n  // Processing Proxy objects before sending.\n  if (pyodide.isPyProxy(result)) {\n    result = generateResponseObject(result);\n  }\n\n  try {\n    postMessageRegular(result);\n  } catch (error) {\n    postMessageError(error);\n  }\n}\n\nonmessage = async (event) => {\n  // Making sure we don't arrive early at the party.\n  await pyodideReadyPromise;\n\n  const { python, fsCommand, ...context } = event.data;\n\n  console.debug(\"wasm: onmessage\");\n\n  if (fsCommand) {\n    handleFsCommand(fsCommand);\n  } else {\n    // The worker copies the context in its own \"memory\" (an object mapping name to values)\n    for (const key of Object.keys(context)) {\n      self[key] = context[key];\n    }\n    handlePythonCode(python);\n  }\n};\n\n/**\n * Message post functions.\n */\n\nfunction postMessageRegular(object) {\n  console.debug(\"wasm: postMessageRegular\");\n\n  self.postMessage({\n    results: object,\n  });\n}\n\nfunction postMessageTransferable(object, transferable) {\n  console.debug(\"wasm: postMessageTransferable\");\n\n  self.postMessage(\n    {\n      results: object,\n    },\n    transferable\n  );\n}\n\nfunction postMessageError(error) {\n  console.debug(\"wasm: postMessageError\");\n\n  self.postMessage({\n    error: error.message,\n  });\n}\n\nfunction postConsoleMessage(consoleMessage) {\n  console.debug(\"wasm: postConsoleMessage\");\n\n  self.postMessage({\n    consoleMessage,\n  });\n}\n"]}