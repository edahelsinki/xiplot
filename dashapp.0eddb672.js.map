{"version":3,"sources":["dashapp.ts"],"names":[],"mappings":";AACA,OAAO,QAAU","file":"dashapp.0eddb672.js","sourceRoot":"../src","sourcesContent":["//@ts-ignore\nwindow.dashApp = `\nimport dashapp\n\nfrom dash_extensions.enrich import DashProxy, ServersideOutputTransform\n\nfrom dashapp.app import DashApp\nfrom dashapp.utils.store import ServerSideStoreBackend\n\napp = DashProxy(\n    \"dashapp.app\", url_base_pathname=URL_BASE_PATHNAME,\n    suppress_callback_exceptions=True, compress=False, eager_loading=True,\n    transforms=[ServersideOutputTransform(\n        backend=ServerSideStoreBackend(), session_check=False, arg_check=False,\n    )],\n)\n\n\nimport pyodide\nimport shutil\n\nfrom pathlib import Path\n\nPath(\"data\").mkdir(exist_ok=True, parents=True)\n\nfor dataset in [\n    \"autompg-B.csv\", \"autompg.csv\", \"auto-mpg.csv\",\n    \"Wang-B.csv\", \"Wang-dataframe.csv\",\n]:\n    with open(Path(\"data\") / dataset, \"w\") as file:\n        shutil.copyfileobj(pyodide.http.open_url(\"data/\" + dataset), file)\n\n\napp = DashApp(app=app, df_from_store=lambda df: df, df_to_store=lambda df: df).app\n\n# Dummy request to ensure the server is setup when we request the index\nwith app.server.app_context():\n    with app.server.test_client() as client:\n        client.get(\"_favicon.ico\")\n`;\n"]}